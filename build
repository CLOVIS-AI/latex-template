#!/bin/bash

# Logging the LaTeX
TMP=$(mktemp)
if [ $1 = "--no-print-logs" ]
then
	shift;
else
	echo "This session will be written at: file://$TMP"
	echo ""
fi
echo "RUNNING $0 $*" >> $TMP

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
ORANGE='\033[0;33m'
WHITE='\033[0;37m'
NO_COLOR='\033[0;0m'

# Current directory
CRT_DIR=$(pwd)
echo "Running in directory $CRT_DIR" >> $TMP

# Options for LaTeX commands
LATEXFLAGS="-shell-escape -interaction=nonstopmode -halt-on-error"

# Displays the 10 last lines of logs and quits
function ERROR {
	echo -e "$WHITE" && echo ""
	echo -e "${RED}An error occured... Here are the last 10 lines of logs;"
	echo -e "The full logs are available at $TMP$WHITE"
	echo ""
	echo "..."
	cat $TMP | tail -10
	exit 1
}

# Gets data about a file
#   - $NAME          Name of the file (path, no extension)
#   - $NAME_NO_PATH  Name of the file (no path, no extension)
#   - $DIR           Name of the directory (only path)
function FILENAME {
	echo "Searching filename data for $1" >> $TMP

	NAME=$(basename -- "${1}")
	NAME="${1%.*}"
	echo "  Name of the file: $NAME" >> $TMP

	DIR=$(dirname -- "${1}")
	echo "  Name of the directory: $DIR" >> $TMP

	NAME_NO_PATH=${NAME#$DIR}
	NAME_NO_PATH=${NAME_NO_PATH#"/"}
	echo "  Name of the file without the path: $NAME_NO_PATH" >> $TMP
}

# Requires the script to be running in the file's directory
function REQ_WD {
	FILENAME $1
	cd $DIR
}

function BACK_TO_WD {
	cd $CRT_DIR
}

# LaTeX first run
function FIRSTRUN {
	echo "LaTeX first run:" >> $TMP
	echo -ne "$1 $BLUE["
	lualatex $LATEXFLAGS $NAME_NO_PATH.tex >> $TMP || ERROR
	echo -n '='
}

# Runs makeindex
function INDEX {
	FILENAME $1

	if [ -f $NAME_NO_PATH.idx ]
	then
		echo "Running makeindex:" >> $TMP
		cat $NAME_NO_PATH.idx | makeindex -i -q -o $NAME_NO_PATH.ind 2>>$TMP >> $TMP || ERROR && echo -n "="
	else
		echo "Found no $NAME_NO_PATH.idx, skipping makeindex." >> $TMP
	fi
}

function GLOSSARY {
	FILENAME $1

	if [ -f $NAME_NO_PATH.glo ]
	then
		echo "Running makeglossaries:" >> $TMP
		makeglossaries $NAME_NO_PATH >> $TMP 2>>$TMP || ERROR && echo -n "="
	else
		echo "Found no $NAME_NO_PATH.glo, skipping makeglossaries." >> $TMP
	fi
}

# Runs bibtex
function BIBLIO {
	FIRSTRUN $1

	BIBFILE=$NAME_NO_PATH.aux
	echo "Running BibTeX:" >> $TMP
	bibtex "$BIBFILE" >> $TMP && echo -n '=' && \
	lualatex $LATEXFLAGS $NAME_NO_PATH.tex >> $TMP && echo -n '='
}

function ISUPTODATE {
	[ $# -ne 2 ] && echo "ISUPTODATE: requires 2 file parameters, given: $#." && exit 1
	[ -f $1 ] || return 0
	[ -f $2 ] || return 1
	date1=$(date -d "$(stat -c %y $1)" +%s)
	date2=$(date -d "$(stat -c %y $2)" +%s)
	[ $date1 -lt $date2 ]
}

function PDF {
	FILENAME $1
	if ISUPTODATE $NAME.tex $NAME.pdf
	then
		if ISUPTODATE $NAME.bib $NAME.pdf
		then
			echo -e "${WHITE}PDF LaTeX:$NO_COLOR $1 $GREEN[UP-TO-DATE]$NO_COLOR"
		else
			MAKEPDF $1
		fi
	else
		MAKEPDF $1
	fi

	MORE_ARGS $* && shift && PDF $*
}

# Runs lualatex
function MAKEPDF {
	echo -ne "${WHITE}PDF LaTeX:$NO_COLOR "
	REQ_WD $1
	BIBLIO $1
	INDEX $1
	GLOSSARY $1

	echo "Running LuaLaTeX:" >> $TMP
	lualatex $LATEXFLAGS $NAME_NO_PATH.tex >> $TMP || ERROR
	echo -e "=]$NO_COLOR"

	BACK_TO_WD
}

# Cleans generated files
function SOFTCLEAN {
	FILENAME $1

	echo "Cleaning (soft)" >> $TMP
	rm -rfv $NAME.aux \
		$NAME.log \
		$NAME.synctex.gz \
		$NAME.toc \
		$NAME.out \
		$NAME.idx \
		$NAME.glg \
		$NAME.glo \
		$NAME.gls \
		$NAME.ind \
		$NAME.ist \
		$NAME.ilg \
		$NAME.bbl \
		_minted-$NAME \
		$NAME.blg \
		$NAME.dvi \
		$NAME.idv \
		$NAME.lg >> $TMP
}

# Cleans generated files + graphical output
function CLEAN {
	echo -ne "${WHITE}CLEANING:$NO_COLOR $1"
	SOFTCLEAN $1
	echo -e " $BLUE[Done]$NO_COLOR"

	MORE_ARGS $* && shift && CLEAN $*
}

# Cleans all regenerable files
function HARDCLEAN {
	echo -ne "${WHITE}HARD CLEANING:$NO_COLOR $1 $BLUE["
	SOFTCLEAN $1
	echo -n "="
	echo "Cleaning (hard):" >> $TMP
	rm -rfv $NAME.pdf >> $TMP
	rm -rfv $NAME.html >> $TMP
	echo -e "=]$NO_COLOR"

	MORE_ARGS $* && shift && HARDCLEAN $*
}

function HTML {
	FILENAME $1
	if ISUPTODATE $NAME.tex $NAME.html
	then
		echo -e "${WHITE}HTML LaTeX:$NO_COLOR $1 $GREEN[UP-TO-DATE]$NO_COLOR"
	else
		MAKEHTML $1
	fi

	MORE_ARGS $* && shift && HTML $*
}

# Generates HTML via Pandoc
function MAKEHTML {
	echo -ne "${WHITE}HTML LaTeX:$NO_COLOR $1"

	echo "Running HTML (pandoc):" >> $TMP
	pandoc $NAME.tex -o $NAME.html -t html5 >> $TMP
	echo -e " $BLUE[Done]$NO_COLOR"
}

function MORE_ARGS {
	if [ "$#" -gt 1 ]
	then
		return 0
	else
		return 1
	fi
}

# Displays the help
function HELP {
	echo -e "$WHITE === HELP === $NO_COLOR"
	echo ""
	echo "General syntax:"
	echo "  ./build [options] COMMAND FILE(S)"
	echo ""
	echo "Commands:"
	echo "  PDF       Export to PDF (LuaLaTeX)"
	echo "  HTML      Export to HTML (Pandoc)"
	echo "  CLEAN     Deletes build file"
	echo "  HARDCLEAN Deletes build files AND output files (PDF, HTML...)"
	echo ""
	echo "Syntax for help commands:"
	echo "  ./build [options] COMMAND"
	echo ""
	echo "Help commands:"
	echo "  HELP     Show this page"
	echo "  DEP      Print the dependencies & display whether they are installed"
	echo ""
	echo "Options:"
	echo "  --no-print-logs  Do not print the log filename at the beginning of the script"
}

# Displays the dependencies
function DEPS {
	echo "The commands needed by this script are:"
	check "latex" "Compile LaTeX documents"
	check "bibtex" "Organize bibliographies in LaTeX documents"
	check "lualatex" "Export LaTeX to PDF"
	check "pandoc" "Export LaTeX to HTML"
	check "dirname" "Get the directory in which a file is"
	check "basename" "Get the name of the file, without the directory"
	check "makeindex" "Generate the index of a LaTeX document"
	check "date" "Timestamp conversion"
	check "stat" "Timestamp of last modification of a file"
}

# Displays Found: or MISSING: for the command & description
function check {
	if hash $1 2>/dev/null
	then
		echo "Found:   $1 -- $2"
	else
		echo -e "\033[0;31mMISSING: $1\033[0m -- $2"
	fi
}

case $1 in
pdf|PDF)
	shift;PDF $*;;
html|HTML)
	shift;HTML $*;;
clean|CLEAN)
	shift;CLEAN $*;;
hardclean|HARDCLEAN|HARD|hard)
	shift;HARDCLEAN $*;;
dependencies|dep|DEP)
	DEPS;;
*)
	echo "You need to specify a goal.";HELP;;
esac

exit 0
